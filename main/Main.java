package main;


import views.GeneratorView;
import models.SimuladorTipo;
import models.Pregunta;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import services.SimuladorService;
import utils.Utils;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author admin
 */
public class Main extends javax.swing.JFrame {
    
    private static final Dimension SIZE = new Dimension(430, 932);
    private List<SimuladorTipo> listaSimuladores = new ArrayList<>();
    private SimuladorService simuladorService = SimuladorService.getInstance();

    /**
     * Creates new form main
     */
    public Main() {
        initComponents();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            e.printStackTrace();
        }
        Utils.setMainFrame(this);
        setGlobalFont();
        GeneratorView p1 = new GeneratorView();
        this.setResizable(false);
        showPanel(p1);
        this.simuladorService.cargarSimuladores();
        listaSimuladores = this.simuladorService.getSimuladoresList();
        //checkSimuladoresList();
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setMinimumSize(SIZE);
        jPanel1.setPreferredSize(SIZE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    public void showPanel(JPanel p) {
//        HomeView p1 = new HomeView();
        p.setSize(SIZE);
        p.setLocation(0,0);
        
        jPanel1.removeAll();
        jPanel1.add(p, BorderLayout.CENTER);
        jPanel1.revalidate();
        jPanel1.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void checkSimuladoresList() {
        for (int i = 0; i < listaSimuladores.size(); i++) {
            SimuladorTipo simulador = listaSimuladores.get(i); // Obtenemos el simulador en la posición i
            System.out.println("Simulador " + (i + 1) + ": " + simulador.getsimuladorRuta()); // Mostramos el nombre o ruta del simulador

            // Si deseas imprimir las preguntas del simulador:
            List<Pregunta> preguntas = simulador.getListaPreguntas(); // Asegúrate de que SimuladorTipo tenga un método getPreguntas()
            for (Pregunta pregunta : preguntas) {
                System.out.println("  Pregunta: " + pregunta.getPregunta());
                System.out.println("  Respuesta correcta: " + pregunta.getRespuestaCorrecta());
                System.out.println("  Respuestas incorrectas: " + String.join(", ", pregunta.getRespuestasIncorrectas()));
            }
        }
    }

    private void setGlobalFont() {
        try {
            // Cargar la fuente desde el archivo .ttf
            Font ralewayFont = Font.createFont(Font.TRUETYPE_FONT, new File("build/classes/resources/fonts/Raleway-VariableFont_wght.ttf"));

            // Registrar la fuente en el entorno gráfico
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(ralewayFont);

            // Establecer la fuente globalmente para todos los componentes
            // Esto afecta tanto a las fuentes de los componentes estándar como a otros personalizados.
            UIManager.put("defaultFont", ralewayFont);
            
            // Establecer la fuente en el Look and Feel (esto hará que la fuente se aplique globalmente)
            UIManager.put("Label.font", ralewayFont);          // Para etiquetas (labels)
            UIManager.put("Button.font", ralewayFont);         // Para botones (buttons)
            UIManager.put("TextField.font", ralewayFont);      // Para campos de texto (text fields)
            UIManager.put("TextArea.font", ralewayFont);       // Para áreas de texto (text areas)
            UIManager.put("ComboBox.font", ralewayFont);       // Para combos (combo boxes)
            UIManager.put("MenuItem.font", ralewayFont);       // Para ítems de menú (menu items)
            UIManager.put("RadioButton.font", ralewayFont);    // Para botones de radio (radio buttons)
            UIManager.put("CheckBox.font", ralewayFont);       // Para casillas de verificación (checkboxes)
            UIManager.put("Table.font", ralewayFont);          // Para tablas (tables)
            UIManager.put("TextPane.font", ralewayFont);       // Para panes de texto (text panes)
            UIManager.put("TitledBorder.font", ralewayFont);   // Para bordes titulados (titled borders)

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
